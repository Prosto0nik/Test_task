import pytest

from archiver_unpacker import archiver, unpacker, russ_dictionary

# параметризованные тесты архивирования
@pytest.mark.parametrize("input_text, expected_result", [
    ("Делать дела нужно", "Делать $$a нужно"),
    ("дела говорят за человека", "$$a $$бят за $$дка"),
    ("... это жизненный путь", "... это $$гый путь"),
    ("... это Жизненный путь", "... это Жизненный путь"),
    ("Сжатия не будет, если не будет совпадать регистр, проблема решаемая, но нужно тратить символы для описания что должно быть в верхнем регистре", "Сжатия не будет, если не будет совпадать регистр, проблема решаемая, но нужно тратить символы для описания что должно быть в верхнем регистре"),
    ("Сжатие работает лучше когда больше корней в словаре", "Сжатие $$вет лучше когда $$ке корней в $$чре"),
])
def test_archiver(input_text, expected_result):
    archived_text = archiver(input_text, russ_dictionary)
    assert archived_text == expected_result

# параметризованные тесты разархивирования
@pytest.mark.parametrize("input_text, expected_result", [
    ("Этот текст останется без измененний т.к. нет нужных корней для него :(", "Этот текст останется без измененний т.к. нет нужных корней для него :("),
    ("А этот текст уже будет сжат, т.к. для него есть корни в $$чре", "А этот текст уже будет сжат, т.к. для него есть корни в словаре"),
    ("$$ч $$ц $х $ф $$у $$т Слова Жизн Знам Важн Крас Скор", "слова жизн знам важн крас скор Слова Жизн Знам Важн Крас Скор"),
    ("Добавив еще пару сотен корней можно добиться сжатия в районе десяти-пятнядцати процентов, тупо за счет сокращения двух, в лучшем случае трёх-четырёх символов за одно слово", "Добавив еще пару сотен корней можно добиться сжатия в районе десяти-пятнядцати процентов, тупо за счет сокращения двух, в лучшем случае трёх-четырёх символов за одно слово"),
])

def test_unpacker(input_text, expected_result):
    uncompressed_text = unpacker(input_text, russ_dictionary)
    assert uncompressed_text == expected_result

if __name__ == '__main__':
    pytest.main()
